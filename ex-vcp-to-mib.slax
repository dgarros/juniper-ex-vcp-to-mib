/* ------------------------------------------------------------------------------------------------------------------------------------------------
--- Author : Damien GARROS / dgarros@juniper.net
--- Version : v2
--- Last Modified : 2013-July-11
--- Tested on EX4200-VC & EX8200-VC
--- Description ---

        This script will gather several information about VCP links and populate Juniper Mibs entries with them :
        Information gather per VCP link
               - Input/Output Bytes per second  Counter 64
			   - Input/Output Bits per second   Counter 64
               - CRC Errors                     Counter 64
               - Input/Output Bytes             Counter 64
			   - Status 						Counter 64
					- Up 		>	1
					- Down 		>	0
					- Disabled 	>	2
					- Absent 	>	3
        
        A VCP link not available for one hour will be automatically removed from Mib 
               
        By default, only vcp-* links will be gather, if you want to get all VCP links including "internal" you must add "ports all" option 
                op ex-vcp-to-mib ports all
               
        To check if Mib is correctly populated, and to get OID for each entry, we can use these commands from CLI : 
                root@EX> show snmp mib walk jnxUtilCounter64Value
                root@EX> show snmp mib walk jnxUtilCounter64Value ascii | match 4743
        
        As a reminder 
                jnxUtilCounter32Value           1.3.6.1.4.1.2636.3.47.1.1.1.1.2
                jnxUtilCounter64Value           1.3.6.1.4.1.2636.3.47.1.1.2.1.2
                jnxUtilIntegerValue             1.3.6.1.4.1.2636.3.47.1.1.3.1.2
                jnxUtilUintValue                1.3.6.1.4.1.2636.3.47.1.1.4.1.2
                jnxUtilStringValue              1.3.6.1.4.1.2636.3.47.1.1.5.1.2          
                
--- Installation guide ---           
        This script can run as "OP" or "Events" script
        
        To execute it as "op script"
                Copy it on /var/db/scripts/op on each RE
                Add "set system scripts op file ex-vcp-to-mib.slax"
                
                Then, execute it from cli with 
                        op ex-vcp-to-mib <option>
                        
        To execute it as "Event script"
                 Copy it on /var/db/scripts/event on each RE
                 
                 Declare it into the configuration
                        set event-options policy VCP-TO-MIB events <event-name>
                        set event-options policy VCP-TO-MIB then event-script "ex-vcp-to-mib <option>"
                        
                 if you want to execute it periodically, you can create an event like this:
                        set event-options generate-event 2MIN time-interval 120
                 
                 For the first execution as Event script, it is recommanded to activate debug to syslog
                        set event-options policy VCP-TO-MIB then event-script "ex-vcp-to-mib debug syslog"
                 Then you can monitor log file to confirm if script is running as expected.
                 
--- Known limitations ---   
        -- on old Junos Version (discover on 10.0), the get-virtual-chassis-port-statistics output is different and the script doesn't get the VCP list. 
        As a workaroud, you have to replace this line
                for-each( $vcport-stat-ext-output/multi-routing-engine-item/virtual-chassis-port-statistics-information/statistics-port-list/statistics ) {
        With this one 
                for-each( $vcport-stat-ext-output/multi-routing-engine-item/virtual-chassis-port-statistics-information/port-list/statistics ) {
        

 ---------------------------------------------------------------------------------------------------------------------------------------------------*/
version 1.0;
 
/* Junos standard namespaces */
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";

/* EXSLT extensions and app specific namespaces */
ns exsl extension = "http://exslt.org/common";
ns func extension = "http://exslt.org/functions";
ns dga = "http://xml.juniper.net/junos/dga";

import "../import/junos.xsl";
 
var $arguments = {
	<argument> {
		<name> "debug";
		<description> "Print debug messages on screen, syslog or both [ none* | screen | syslog | both ]";
	}
	<argument> {
		<name> "ports";
		<description> "Which ports do you want to record in Mib [ vcp* | all ]";
	}
}

param $debug = "none";
param $ports = "vcp";

param $param-ports = $ports;

var $PARAM-DEBUG = $debug;
var $SCRIPT-ID = "4743";

match / {

	var $con = jcs:open();
	
	expr dga:logs("Script ex-vcp-to-mib START with scrip-id " _ $SCRIPT-ID);
	
	/* Get VC-Ports statistics */
	var $vcport-stat-ext-cmd = <get-virtual-chassis-port-statistics> {
								  <extensive>;
								  }
																					
	var $vcport-stat-ext-output = jcs:execute( $con, $vcport-stat-ext-cmd );
	
	for-each( $vcport-stat-ext-output/multi-routing-engine-item/virtual-chassis-port-statistics-information/statistics-port-list/statistics ) {
		var $item = .;
		var $fpc = ../../../re-name;
		
		var $int-type = jcs:regex("^[a-z]+", $item/port-name);
		
		if($int-type == "vcp" or $param-ports == "all") { 
		
			/*** Input/Output Bytes per second ***/
			expr dga:add-counter64-to-mib( $con, $fpc _ "-" _ $item/port-name _ "-bps-in", $item/input-bps);
			expr dga:add-counter64-to-mib( $con, $fpc _ "-" _ $item/port-name _ "-bps-out", $item/output-bps);
			
			/*** Input/Output Bit per second ***/
			expr dga:add-counter64-to-mib( $con, $fpc _ "-" _ $item/port-name _ "-bitps-in", $item/input-bps * 8);
			expr dga:add-counter64-to-mib( $con, $fpc _ "-" _ $item/port-name _ "-bitps-out", $item/output-bps * 8);
			
			/*** CRC Errors ***/					
			expr dga:add-counter64-to-mib( $con, $fpc _ "-" _ $item/port-name _ "-crc", $item/crc-align-errors);

			/*** Input/Output Bytes ***/
			expr dga:add-counter64-to-mib( $con, $fpc _ "-" _ $item/port-name _ "-bytes-in", $item/input-bytes);
			expr dga:add-counter64-to-mib( $con, $fpc _ "-" _ $item/port-name _ "-bytes-out", $item/output-bytes);
			
			expr dga:logs("VCP statistics link added to Mib : " _ $fpc _ " " _ $item/port-name); 
		}
	}
	
	/*** Get ports status  ***/
	var $vcport-output = jcs:execute( $con, "get-virtual-chassis-port-information" );
	
	for-each( $vcport-output//port-list/port-information ) {
		var $item1 = .;
		var $fpc1 = ../../../re-name;
		
		var $port-name = dga:clean-int-name( $item1/port-name ); 
		
		expr dga:logs("VCP status added to Mib : " _ $fpc1 _ " " _ $port-name ); 
			
		expr dga:add-counter64-to-mib( $con, $fpc1 _ "-" _ $port-name _ "-status", dga:convert-vcp-status($item1/port-status));
		
	}
	/*** Clean Old Entries on Utility Mib  ***/
	expr dga:clean-old-entries( $con, "counter64", "Counter64" );
	

	/* Close RPC */
	expr jcs:close( $con );

}


/* ------------------------------------------------- */
/* this function is used to clean VCP interface name */
/* ------------------------------------------------- */
<func:function name="dga:clean-int-name">
{
	param $_name_;
   
	var $begin-name = jcs:split("-", $_name_);
   
	if( $begin-name[1] == "vcp" ) { 
		<func:result select="string($_name_)">; 
	}
	else { 
		var $full-name = "vcp-" _ $_name_;
		<func:result select="string($full-name)">; 
	}
}


/* ------------------------------------------------- */
/* this function is used to convert vcp status from string to integer */
/* ------------------------------------------------- */
<func:function name="dga:convert-vcp-status">
{
   param $_status_;
   
   if( $_status_ == "Up" ) { <func:result select="string(1)">; }
   else if( $_status_ == "Down" ) { <func:result select="string(0)">; }
   else if( $_status_ == "Disabled" ) { <func:result select="string(2)">; }
   else if( $_status_ == "Absent" ) { <func:result select="string(3)">; }
   
}

/* ----------------------------------------------------------------- */
/* this function is used to add a Integer value to the Utility Mibs */
/* ----------------------------------------------------------------- */
<func:function name="dga:add-integer-to-mib">
{
	param $_con_;
	param $_instance_;
	param $_value_;
   
	var $_mibset_ = <request-snmp-utility-mib-set> {
                                        <object-type> "integer";
                                        <instance> $SCRIPT-ID _ "-" _ $_instance_;
                                        <object-value> $_value_;
				}
	
	var $result = jcs:execute($_con_, $_mibset_);
	
	<func:result select="true()">;
}

/* ------------------------------------------------- */
/* this function is used to add a Counter64 value to the Utility Mibs */
/* ------------------------------------------------- */
<func:function name="dga:add-counter64-to-mib">
{
	param $_con_;
	param $_instance_;
	param $_value_;
   
	var $_mibset_ = <request-snmp-utility-mib-set> {
                                        <object-type> "counter64";
                                        <instance> $SCRIPT-ID _ "-" _ $_instance_;
                                        <object-value> $_value_;
				}
	
	var $result = jcs:execute($_con_, $_mibset_);
	
	<func:result select="true()">;
}

/* ------------------------------------------------- */
/* this function is used to logs message to screen and/or syslog */
/* ------------------------------------------------- */
<func:function name="dga:logs">
{
	param $_message_;
	
	if($PARAM-DEBUG == "screen" or $PARAM-DEBUG == "both") {
                expr jcs:output($_message_);         	
    }
        
    if($PARAM-DEBUG == "syslog" or $PARAM-DEBUG == "both") {
                expr jcs:syslog("external.notice", $_message_ );
    }
}

/* ------------------------------------------------- */
/* Parameters "object-type-xml" & "object-type-jnxUtil" specify the variable type used into the script.

These parameter should have one of those value  (Be carefull : Case sensitive) 
        $object-type-xml           $object-type-jnxUtil   
          counter                         Counter32
          counter64                       Counter64
          integer                         Integer
          string                          String
          unsigned-integer                Uint

***/
<func:function name="dga:clean-old-entries">
{
		param $_con_;
		param $object-type-xml; 
		param $object-type-jnxUtil;
        
		var $tracker-name = $SCRIPT-ID _ "-tracker";
      
        expr dga:logs("clean-old-entries start with object type : " _ $object-type-xml);
                
        /*** insert tracker ***/
        var $mibset-fd = <request-snmp-utility-mib-set> {
                            <object-type> $object-type-xml;
                            <instance> $tracker-name;
                            <object-value> "1";
                        }
	
        var $result1 = jcs:execute($_con_, $mibset-fd);
        
        /*** Get Utility Mibs entries ***/
        var $utility-mibs-cmd = <walk-snmp-object> {
                                    <snmp-object-name> "jnxUtil" _ $object-type-jnxUtil _ "Time";
                                }
        var $utility-mibs-after = jcs:execute($_con_, $utility-mibs-cmd );
        
        /*** Locate tracker ***/
        var $tracker = $utility-mibs-after/snmp-object/index[index-value == $tracker-name];
                       
        if( $tracker )
        {         
			/* Extract hour information from "timestamp" for tracker */
			var $tracker-hours = jcs:regex("([a-z0-9 ]{13})([a-z0-9 ]{2})",  $tracker/../object-value);
		
			expr dga:logs("Tracker found : " _ $tracker/../index/index-value _ " with hour value : " _ $tracker-hours[3]);
			
			/* Compare hour of each entry belongings to this script, to detect old one */ 
			for-each( $utility-mibs-after/snmp-object ) {
				   
				var $object = .; 
				var $object-script-id = jcs:regex("([0-9 ]{4})",  $object/index/index-value);
	
				/* Check if the entry belong to this script */
				if( $object-script-id == $SCRIPT-ID)
				{
					   var $object-hours = jcs:regex("([a-z0-9 ]{13})([a-z0-9 ]{2})",  $object/object-value);
					   
					/* compare hour */
					if($object-hours[3] != $tracker-hours[3])
					{
						/* call logs( $message = "Object erase from Utility Mib  : " _ $object/index/index-value _ " hour : " _ $object-hours[3]); */
						var $mibset-clear-entry = <request-snmp-utility-mib-clear> {
													<object-type> $object-type-xml;
													<instance> $object/index/index-value;
												}

						var $result2 = jcs:execute($_con_, $mibset-clear-entry); 
					}
				}
			}   
        }

	<func:result select="true()">;
}





